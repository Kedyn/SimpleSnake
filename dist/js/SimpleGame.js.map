{"version":3,"sources":["js/node_modules/browser-pack/_prelude.js","js/src/framework/Game.ts","js/src/framework/InputHandler.ts","js/src/framework/Scene.ts","js/src/framework/SceneManager.ts","js/src/framework/Tools/Drawings.ts","js/src/framework/Tools/KeyCode.ts","js/src/framework/Tools/constants.ts","js/src/game/GameScene.ts","js/src/game/IntroScene.ts","js/src/main.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","SceneManager_1","constants_1","DEFAULT_GAME_OPTIONS","title","frame_rate","debug_mode","canvas","id","width","height","version","VERSION","Game","GetInstance","instance","prototype","create","options","this","checkOptions","checkCanvas","time","Date","frame_counter","last_frame_time","getTime","log","init","SimpleSceneManager","currentScene","requestAnimationFrame","animate","getCanvas","message","console","document","getElementById","createElement","getElementsByTagName","insertBefore","body","firstChild","tagName","elapse","SimpleGame","interval","SECOND","update","render","KeyCode_1","constants_2","Game_1","InputHandler","keys","mouse_buttons","resetCallbacks","key","KEYCODE","int","parseInt","isNaN","MOUSE_BUTTON","LEFT","MIDDLE","RIGHT","mouse_pos","x","y","initiated","listen","type","callback","INPUT_TYPE","KEYDOWN","callbacks","onKeyDown","push","KEYUP","onKeyUp","MOUSE_MOVE","onMouseMove","MOUSE_DOWN","onMouseDown","MOUSE_UP","onMouseUp","removeListens","isKeyDown","mousePos","isMouseButtonDown","button","tabIndex","addEventListener","onclick","ev","oncontextmenu","onwheel","focus","preventDefault","SimpleInputHandler","keyCode","_i","_a","pageX","pageY","offsetLeft","offsetTop","Scene","game_objects","elapse_time","onEnter","onExit","InputHandler_1","SceneManager","scenes","input_handler","pushScene","scene","onCurrentSceneExit","onCurrentSceneEnter","changeScene","splice","popScene","pop","enter","looping","exit","pos","checkUnsetOptions","default_options","prop","hasOwnProperty","drawOptions","context","fill","fillStyle","fill_color","stroke","lineWidth","line_width","strokeStyle","stroke_color","getTextSize","text","font_size","font_name","DEFAULT_FONT_SIZE","DEFAULT_FONT","getContext","font","save","measureText","restore","drawLine","points","moveTo","lineTo","DEFAULT_DRAW_OPTIONS","closePath","drawCircle","beginPath","DEFAULT_DRAW_CIRCLE_OPTIONS","arc","radius","angle","start","end","clockwise","drawRect","fillRect","rect","drawImage","image","only_show","center","drawText","DEFAULT_DRAW_TEXT_OPTIONS","textAlign","textBaseline","fillText","strokeText","blur","size","shadowBlur","shadowColor","color","shadowOffsetX","shadowOffsetY","THEME_BACKGROUND","THEME_FORECOLOR","Math","PI","getRandomIntInclusive","min","max","ceil","floor","random","DIRECTION","Scene_1","Drawings_1","CELL_SIZE","GameScene","_super","_this","cols","rows","reset","__extends","speed","pause","game_over","grow","snake","shift","head","direction","UP","DOWN","new_x","new_y","isPointInSnake","fruit","setFruit","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","KEY_P","point","answer","index","GameScene_1","DELAY","IntroScene","IntroScene_1","window","onload"],"mappings":"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","file":"SimpleGame.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { SimpleSceneManager } from './SceneManager';\r\nimport { VERSION, SECOND } from \"./Tools/constants\";\r\n\r\ninterface GameOptions {\r\n    title?: string,\r\n    frame_rate?: number,\r\n    debug_mode?: boolean,\r\n    canvas?: {\r\n        id: string,\r\n        width?: number,\r\n        height?: number,\r\n    },\r\n    version?: string\r\n}\r\n\r\nconst DEFAULT_GAME_OPTIONS: GameOptions = {\r\n    title: \"Simple Game\",\r\n    frame_rate: 60,\r\n    debug_mode: true,\r\n    canvas: {\r\n        id: \"SimpleGame\",\r\n        width: 960,\r\n        height: 540\r\n    },\r\n    version: VERSION\r\n}\r\n\r\nclass Game {\r\n    public static GetInstance(): Game {\r\n        if (!Game.instance) {\r\n            Game.instance = new Game();\r\n        }\r\n        return Game.instance;\r\n    }\r\n\r\n    public create(options?: GameOptions): boolean {\r\n        if (options) this.checkOptions(options);\r\n        else this.options = DEFAULT_GAME_OPTIONS;\r\n\r\n        if (this.checkCanvas()) {            \r\n            this.time = new Date();\r\n\r\n            this.frame_counter = 0;\r\n            this.last_frame_time = this.time.getTime();\r\n\r\n            this.log(\"Game creation successful\");\r\n            return true;\r\n        }\r\n        else {\r\n            this.log(\"Game creation failed\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public init(): boolean {\r\n        if (SimpleSceneManager.currentScene()) {\r\n            requestAnimationFrame(this.animate);\r\n            this.log(\"Initiating game animation\");\r\n            return true;\r\n        }\r\n        else {\r\n            this.log(\"Failed to initialize game [no game scene]\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public getCanvas(): HTMLCanvasElement {\r\n        return this.canvas;\r\n    }\r\n\r\n    public log(message: string): void {\r\n        if (this.options.debug_mode) console.log(this.options.title+\": \"+message+\"...\");\r\n    }\r\n\r\n    private static instance: Game;\r\n\r\n    private options: GameOptions;\r\n    private canvas: HTMLCanvasElement;\r\n    private time: Date;\r\n    private frame_counter: number;\r\n    private last_frame_time: number;\r\n\r\n    private constructor() {}    \r\n\r\n    private checkOptions(options: GameOptions): void {\r\n        if (!options.title) options.title = DEFAULT_GAME_OPTIONS.title;\r\n        if (!options.frame_rate) options.frame_rate = DEFAULT_GAME_OPTIONS.frame_rate;\r\n        if (!options.debug_mode) options.debug_mode = DEFAULT_GAME_OPTIONS.debug_mode;\r\n        if (!options.canvas) options.canvas = DEFAULT_GAME_OPTIONS.canvas;\r\n        else {\r\n            if (!options.canvas.id) options.canvas.id = DEFAULT_GAME_OPTIONS.canvas.id;\r\n            if (!options.canvas.width) options.canvas.width = DEFAULT_GAME_OPTIONS.canvas.width;\r\n            if (!options.canvas.height) options.canvas.height = DEFAULT_GAME_OPTIONS.canvas.height;\r\n        }\r\n        this.options = options;\r\n    }\r\n\r\n    private checkCanvas(): boolean {\r\n        let canvas = document.getElementById(this.options.canvas.id);\r\n        if (!canvas) {\r\n            canvas = document.createElement(\"canvas\");\r\n            (<HTMLCanvasElement>canvas).width = this.options.canvas.width;\r\n            (<HTMLCanvasElement>canvas).height = this.options.canvas.height;\r\n            document.getElementsByTagName(\"body\")[0].insertBefore(canvas, document.body.firstChild);\r\n        }\r\n        if (canvas.tagName === \"CANVAS\") {\r\n            this.canvas = <HTMLCanvasElement>canvas;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private animate(): void {\r\n        let time     = new Date();\r\n        let elapse   = time.getTime() - SimpleGame.last_frame_time;\r\n        let interval = SECOND / SimpleGame.options.frame_rate;\r\n\r\n        if (elapse > interval) {\r\n            SimpleSceneManager.update(elapse);\r\n            SimpleSceneManager.render(elapse);\r\n\r\n            SimpleGame.last_frame_time = time.getTime() - (elapse % interval);\r\n        }\r\n\r\n        requestAnimationFrame(SimpleGame.animate);\r\n    }\r\n}\r\n\r\nexport const SimpleGame: Game = Game.GetInstance();","import { INPUT_TYPE } from './Tools/constants';\r\nimport { KEYCODE } from './Tools/KeyCode';\r\nimport { MOUSE_BUTTON } from \"./Tools/constants\";\r\nimport { SimpleGame } from './Game';\r\n\r\ninterface mouse_callbacks {\r\n    onKeyDown:   Array<any>;\r\n    onKeyUp:     Array<any>;\r\n    onMouseMove: Array<any>;\r\n    onMouseDown: Array<any>;\r\n    onMouseUp:   Array<any>;\r\n}\r\n\r\nclass InputHandler {\r\n    public static GetInstance(): InputHandler {\r\n        if (!InputHandler.instance) {\r\n            InputHandler.instance = new InputHandler();\r\n        }\r\n\r\n        return InputHandler.instance;\r\n    }\r\n\r\n    public listen(type: INPUT_TYPE, callback: any): void {\r\n        if (!this.initiated) {\r\n            this.init();\r\n        }\r\n\r\n        if (type == INPUT_TYPE.KEYDOWN) {\r\n            this.callbacks.onKeyDown.push(callback);\r\n        }\r\n        else if (type == INPUT_TYPE.KEYUP) {\r\n            this.callbacks.onKeyUp.push(callback);\r\n        }\r\n        else if (type == INPUT_TYPE.MOUSE_MOVE) {\r\n            this.callbacks.onMouseMove.push(callback);\r\n        }\r\n        else if (type == INPUT_TYPE.MOUSE_DOWN) {\r\n            this.callbacks.onMouseDown.push(callback);\r\n        }\r\n        else if (type == INPUT_TYPE.MOUSE_UP) {\r\n            this.callbacks.onMouseUp.push(callback);\r\n        }\r\n    }\r\n\r\n    public removeListens(): void {\r\n        this.resetCallbacks();\r\n    }\r\n\r\n    public isKeyDown(key: KEYCODE): boolean {\r\n        if (this.keys[key]) {\r\n            return this.keys[key];\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public mousePos(): { x: number, y: number } {\r\n        return this.mouse_pos;\r\n    }\r\n\r\n    public isMouseButtonDown(button: MOUSE_BUTTON): boolean {\r\n        if (this.mouse_buttons[button]) {\r\n            return this.mouse_buttons[button];\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private static instance: InputHandler;\r\n\r\n    private keys:          boolean[];\r\n    private mouse_buttons: boolean[];\r\n    private mouse_pos:     { x: number, y: number };\r\n    private callbacks:     mouse_callbacks;\r\n    private initiated:     boolean;\r\n\r\n    private constructor() {\r\n        this.keys          = [];\r\n        this.mouse_buttons = [];\r\n\r\n        this.resetCallbacks();\r\n\r\n        for (let key in KEYCODE) {\r\n            let int = parseInt(key, 10);\r\n            if (!isNaN(int)) {\r\n                this.keys[int] = false;\r\n            }\r\n        }\r\n\r\n        this.mouse_buttons[MOUSE_BUTTON.LEFT] = false;\r\n        this.mouse_buttons[MOUSE_BUTTON.MIDDLE] = false;\r\n        this.mouse_buttons[MOUSE_BUTTON.RIGHT] = false;\r\n        \r\n        this.mouse_pos = { x: 0, y: 0 };\r\n\r\n        this.initiated = false;\r\n    }\r\n\r\n    private init(): void {\r\n        SimpleGame.getCanvas().tabIndex = 0;\r\n\r\n        SimpleGame.getCanvas().addEventListener(\"keydown\",   this.onKeyDown,   false);\r\n        SimpleGame.getCanvas().addEventListener(\"keyup\",     this.onKeyUp,     false);\r\n        SimpleGame.getCanvas().addEventListener(\"mousemove\", this.onMouseMove, false);\r\n        SimpleGame.getCanvas().addEventListener(\"mousedown\", this.onMouseDown, false);\r\n        SimpleGame.getCanvas().addEventListener(\"mouseup\",   this.onMouseUp,   false);\r\n\r\n        SimpleGame.getCanvas().onclick       = (ev: MouseEvent)   => { return false; };\r\n        SimpleGame.getCanvas().oncontextmenu = (ev: PointerEvent) => { return false; };\r\n        SimpleGame.getCanvas().onwheel       = (ev: WheelEvent)   => { return false; };\r\n\r\n        SimpleGame.getCanvas().focus();\r\n\r\n        this.initiated = true;\r\n\r\n        SimpleGame.log(\"Input Handler initiated...\");\r\n    }\r\n\r\n    private resetCallbacks(): void {\r\n        this.callbacks = {\r\n            onKeyDown  :  [],\r\n            onKeyUp    :  [],\r\n            onMouseMove:  [],\r\n            onMouseDown:  [],\r\n            onMouseUp  :  []\r\n        };\r\n    }\r\n\r\n    private onKeyDown(ev: KeyboardEvent): void {\r\n        ev.preventDefault();\r\n        SimpleInputHandler.keys[ev.keyCode] = true;\r\n\r\n        for (let callback of SimpleInputHandler.callbacks[\"onKeyDown\"]) {\r\n            callback(ev.keyCode);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(ev: KeyboardEvent): void {\r\n        SimpleInputHandler.keys[ev.keyCode] = false;\r\n\r\n        for (let callback of SimpleInputHandler.callbacks[\"onKeyUp\"]) {\r\n            callback(ev.keyCode);\r\n        }\r\n    }\r\n\r\n    private onMouseMove(ev: MouseEvent): void {\r\n        let x: number = ev.pageX;\r\n        let y: number = ev.pageY;\r\n\r\n        x -= SimpleGame.getCanvas().offsetLeft;\r\n        y -= SimpleGame.getCanvas().offsetTop;\r\n\r\n        SimpleInputHandler.mouse_pos.x = x;\r\n        SimpleInputHandler.mouse_pos.y = y;\r\n\r\n        for (let callback of SimpleInputHandler.callbacks[\"onMouseMove\"]) {\r\n            callback(SimpleInputHandler.mouse_pos);\r\n        }\r\n    }\r\n\r\n    private onMouseDown(ev: MouseEvent): void {\r\n        SimpleInputHandler.mouse_buttons[ev.button] = true;\r\n        \r\n        for (let callback of SimpleInputHandler.callbacks[\"onMouseDown\"]) {\r\n            callback(ev.button, SimpleInputHandler.mouse_pos);\r\n        }\r\n    }\r\n\r\n    private onMouseUp(ev: MouseEvent): void {\r\n        SimpleInputHandler.mouse_buttons[ev.button] = false;\r\n\r\n        for (let callback of SimpleInputHandler.callbacks[\"onMouseUp\"]) {\r\n            callback(ev.button, SimpleInputHandler.mouse_pos);\r\n        }\r\n    }\r\n}\r\n\r\nexport const SimpleInputHandler: InputHandler = InputHandler.GetInstance();","import { SimpleGame } from './Game';\r\nimport { KEYCODE } from './Tools/KeyCode';\r\nimport { GameObject } from './GameObject';\r\nimport { MOUSE_BUTTON } from './Tools/constants';\r\n\r\nexport abstract class Scene {\r\n    public game_objects: GameObject[];\r\n\r\n    public constructor(public id: string) {\r\n        SimpleGame.log(`Creating ${id} scene...`);\r\n        this.game_objects = [];\r\n    }\r\n\r\n    public update(elapse_time: number): void {}\r\n\r\n    public render(elapse_time: number): void {}\r\n\r\n    public onEnter(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public onKeyDown(key: KEYCODE): void {}\r\n\r\n    public onKeyUp(key: KEYCODE): void {}\r\n\r\n    public onMouseMove(x: number, y: number): void {}\r\n\r\n    public onMouseDown(button: MOUSE_BUTTON, x: number, y: number): void {}\r\n\r\n    public onMouseUp(button: MOUSE_BUTTON, x: number, y: number): void {}\r\n\r\n    public onExit(): boolean {\r\n        return true;\r\n    }\r\n}","import { SimpleGame } from \"./Game\";\r\nimport { Scene } from \"./Scene\";\r\nimport { SimpleInputHandler } from './InputHandler';\r\nimport { KEYCODE } from \"./Tools/KeyCode\";\r\nimport { INPUT_TYPE, MOUSE_BUTTON } from \"./Tools/constants\";\r\n\r\nclass SceneManager {\r\n    public static GetInstance(): SceneManager {\r\n        if (!SceneManager.instance) {\r\n            SceneManager.instance = new SceneManager();\r\n        }\r\n        \r\n        return SceneManager.instance;\r\n    }\r\n\r\n    public pushScene(scene: Scene): void {\r\n        if (!this.input_handler) {\r\n            SimpleInputHandler.listen(INPUT_TYPE.KEYDOWN   , this.onKeyDown);\r\n            SimpleInputHandler.listen(INPUT_TYPE.KEYUP     , this.onKeyUp);\r\n            SimpleInputHandler.listen(INPUT_TYPE.MOUSE_MOVE, this.onMouseMove);\r\n            SimpleInputHandler.listen(INPUT_TYPE.MOUSE_DOWN, this.onMouseDown);\r\n            SimpleInputHandler.listen(INPUT_TYPE.MOUSE_UP  , this.onMouseUp);\r\n            \r\n            this.input_handler = true;\r\n        }\r\n        if (this.onCurrentSceneExit()) {\r\n            //SimpleInputHandler.removeListens();\r\n            this.scenes.push(scene);\r\n        }\r\n        else {\r\n            SimpleGame.log(\"Error exiting scene \" + this.currentScene().id);\r\n        }\r\n        if (!this.onCurrentSceneEnter()) {\r\n            SimpleGame.log(\"Error while entering scene\");            \r\n        }\r\n    }\r\n\r\n    public changeScene(scene: Scene): void {\r\n        if (this.scenes.length) {\r\n            if (this.scenes[this.scenes.length - 1].id != scene.id) {\r\n                this.scenes.push(scene);\r\n                if (this.onCurrentSceneExit()) {\r\n                    //SimpleInputHandler.removeListens();\r\n                    this.scenes.splice(this.scenes.length - 2, 1);\r\n                }\r\n                else {\r\n                    SimpleGame.log(\"Error exiting scene \" + this.currentScene().id);\r\n                }\r\n                if (!this.onCurrentSceneEnter()) {\r\n                    SimpleGame.log(\"Error while changing scene\");\r\n                }\r\n            }\r\n            else {\r\n                SimpleGame.log(\"Cannot change to the same scene\");\r\n            }\r\n        }\r\n        else {\r\n            SimpleGame.log(\"Cannot change scene when there are no current scenes\");\r\n        }\r\n    }\r\n\r\n    public popScene(): void {\r\n        if (this.scenes.length > 1) {\r\n            if (this.onCurrentSceneExit()) {\r\n                //SimpleInputHandler.removeListens();\r\n                this.scenes.pop();\r\n                if (!this.onCurrentSceneEnter()) {\r\n                    SimpleGame.log(\"Error while entering scene\");            \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public currentScene(): Scene {\r\n        return this.scenes[this.scenes.length - 1];\r\n    }\r\n\r\n    public update(elapse_time: number): void {\r\n        this.currentScene().update(elapse_time);\r\n        for (let game_object of this.currentScene().game_objects) {\r\n            game_object.update();\r\n        }\r\n    }\r\n\r\n    public render(elapse_time: number): void {\r\n        this.currentScene().render(elapse_time);\r\n        for (let game_object of this.currentScene().game_objects) {\r\n            game_object.render();\r\n        }\r\n    }\r\n    \r\n    private static instance: SceneManager;\r\n\r\n    private scenes:        Scene[];\r\n    private input_handler: boolean;\r\n\r\n    private constructor() {\r\n        this.scenes = [];\r\n        this.input_handler = false;\r\n    }\r\n\r\n    private onCurrentSceneEnter(): boolean {\r\n        let enter = false;\r\n        if (this.currentScene().onEnter()) {\r\n            enter = true;\r\n            let i = 0;\r\n            let looping = true;\r\n            let game_objects = this.currentScene().game_objects;\r\n            while (looping) {\r\n                if (i < game_objects.length) {\r\n                    if (!game_objects[i].onEnter()) {\r\n                        enter = false;\r\n                        looping = false;\r\n                    }\r\n                }\r\n                else {\r\n                    looping = false;\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        return enter;\r\n    }\r\n\r\n    private onCurrentSceneExit(): boolean {\r\n        let exit = false;\r\n        if (this.scenes.length) {\r\n            if (this.currentScene().onExit()) {\r\n                exit = true;\r\n                let i = 0;\r\n                let looping = true;\r\n                let game_objects = this.currentScene().game_objects;\r\n                while (looping) {\r\n                    if (i < game_objects.length) {\r\n                        if (!game_objects[i].onExit()) {\r\n                            exit = false;\r\n                            looping = false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        looping = false;\r\n                    }\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            exit = true;\r\n        }\r\n        return exit;\r\n    }\r\n\r\n    private onKeyDown(key: KEYCODE): void {\r\n        SimpleSceneManager.currentScene().onKeyDown(key);\r\n        for (let game_object of SimpleSceneManager.currentScene().game_objects) {\r\n            game_object.onKeyDown(key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KEYCODE): void {\r\n        SimpleSceneManager.currentScene().onKeyUp(key);\r\n        for (let game_object of SimpleSceneManager.currentScene().game_objects) {\r\n            game_object.onKeyUp(key);\r\n        }\r\n    }\r\n\r\n    private onMouseMove(pos: { x: number, y: number }): void {\r\n        SimpleSceneManager.currentScene().onMouseMove(pos.x, pos.y);\r\n        for (let game_object of SimpleSceneManager.currentScene().game_objects) {\r\n            game_object.onMouseMove(pos.x, pos.y);\r\n        }\r\n    }\r\n\r\n    private onMouseDown(button: MOUSE_BUTTON, pos: { x: number, y: number }): void {\r\n        SimpleSceneManager.currentScene().onMouseDown(button, pos.x, pos.y);\r\n        for (let game_object of SimpleSceneManager.currentScene().game_objects) {\r\n            game_object.onMouseDown(button, pos.x, pos.y);\r\n        }\r\n    }\r\n\r\n    private onMouseUp(button: MOUSE_BUTTON, pos: { x: number, y: number }): void {\r\n        SimpleSceneManager.currentScene().onMouseUp(button, pos.x, pos.y);\r\n        for (let game_object of SimpleSceneManager.currentScene().game_objects) {\r\n            game_object.onMouseUp(button, pos.x, pos.y);\r\n        }\r\n    }\r\n}\r\n\r\nexport const SimpleSceneManager: SceneManager = SceneManager.GetInstance();","import {\r\n    DEFAULT_DRAW_CIRCLE_OPTIONS,\r\n    DEFAULT_DRAW_OPTIONS,\r\n    DEFAULT_DRAW_TEXT_OPTIONS,\r\n    DEFAULT_FONT,\r\n    DEFAULT_FONT_SIZE,\r\n    THEME_BACKGROUND,\r\n    THEME_FORECOLOR,\r\n} from './constants';\r\nimport { SimpleGame } from \"./../Game\";\r\n\r\nexport interface DrawingOptions {\r\n    line_width?: number,\r\n    stroke?: boolean,\r\n    stroke_color?: string,\r\n    fill?: boolean,\r\n    fill_color?: string\r\n}\r\n\r\nexport interface DrawingCircleOptions extends DrawingOptions {\r\n    radius?: number,\r\n    angle?: {\r\n        start?: number,\r\n        end?: number\r\n    },\r\n    clockwise?: boolean\r\n}\r\n\r\nexport interface DrawingImageOptions extends DrawingOptions {\r\n    center?: boolean,\r\n    width?: number,\r\n    height?: number,\r\n    only_show?: {\r\n        x?: number,\r\n        y?: number,\r\n        width?: number,\r\n        height?: number\r\n    }\r\n}\r\n\r\nexport interface DrawingTextOptions extends DrawingOptions {\r\n    font_size?: number,\r\n    font_name?: string,\r\n    center?: boolean,\r\n    blur?: {\r\n        x?: number,\r\n        y?: number,\r\n        size?: number,\r\n        color?: string\r\n    }\r\n}\r\n\r\nfunction checkUnsetOptions(options: DrawingOptions, default_options: DrawingOptions): void {\r\n    for (const prop in default_options) {\r\n        if (!options.hasOwnProperty(prop)) {\r\n            options[prop] = default_options[prop];\r\n        }\r\n    }\r\n}\r\n    \r\nfunction drawOptions(context: CanvasRenderingContext2D, options: DrawingOptions): void {\r\n    if (options.fill) {\r\n        context.fillStyle = options.fill_color;\r\n        context.fill();\r\n    }\r\n    if (options.stroke) {\r\n        context.lineWidth = options.line_width;\r\n        context.strokeStyle = options.stroke_color;\r\n        context.stroke();\r\n    }\r\n}\r\n\r\nexport function drawLine(points: Array<{ x: number, y: number }>, options: DrawingOptions = {}): void {\r\n    let context = SimpleGame.getCanvas().getContext(\"2d\");\r\n    context.save();\r\n    context.moveTo(points[0].x, points[0].y);\r\n    for (let i = 1; i < points.length; ++i) {\r\n        context.lineTo(points[i].x, points[i].y);\r\n    }\r\n    checkUnsetOptions(options, DEFAULT_DRAW_OPTIONS);\r\n    if (options.fill) {\r\n        context.closePath();\r\n    }\r\n    drawOptions(context, options);\r\n    context.restore();\r\n}\r\n\r\nexport function drawCircle(x: number, y: number, options: DrawingCircleOptions = {}): void {\r\n    let context = SimpleGame.getCanvas().getContext(\"2d\");\r\n    context.save();\r\n    context.beginPath();\r\n    checkUnsetOptions(options, DEFAULT_DRAW_CIRCLE_OPTIONS);    \r\n    context.arc(x, y, options.radius, options.angle.start, options.angle.end, options.clockwise);\r\n    drawOptions(context, options);\r\n    context.restore();\r\n}\r\n\r\nexport function drawRect(x: number, y: number, width: number, height: number, options: DrawingOptions = {}): void {\r\n    let context = SimpleGame.getCanvas().getContext(\"2d\");\r\n    context.save();\r\n    checkUnsetOptions(options, DEFAULT_DRAW_OPTIONS);\r\n    if (options.fill) {\r\n        context.fillStyle = options.fill_color;\r\n        context.fillRect(x, y, width, height);\r\n    }\r\n    if (options.stroke) {\r\n        context.rect(x, y, width, height);\r\n        context.lineWidth = options.line_width;\r\n        context.strokeStyle = options.stroke_color;\r\n        context.stroke();\r\n    }\r\n    context.restore();\r\n}\r\n\r\nexport function drawImage(x: number, y: number, image: HTMLImageElement, options: DrawingImageOptions = {}): void {\r\n    let context = SimpleGame.getCanvas().getContext(\"2d\");\r\n    context.save();\r\n    if (!options.width) {\r\n        options.width = image.width;\r\n    }\r\n    if (!options.height) {\r\n        options.width = image.width;\r\n    }\r\n    if (!options.only_show.x) {\r\n        options.only_show.x = 0;\r\n    }\r\n    if (!options.only_show.y) {\r\n        options.only_show.y = 0;\r\n    }\r\n    if (!options.only_show.width) {\r\n        options.only_show.width = options.width;\r\n    }\r\n    if (!options.only_show.height) {\r\n        options.only_show.height = options.height;\r\n    }\r\n    if (options.center) {\r\n        x -= options.only_show.width / 2;\r\n        y -= options.only_show.height / 2;\r\n    }\r\n    context.drawImage(image, x, y, options.width, options.height, options.only_show.x, options.only_show.y, options.only_show.width, options.only_show.height);\r\n    context.restore();\r\n}\r\n\r\nexport function drawText(x: number, y: number, text: string, options: DrawingTextOptions = {}): void {\r\n    let context = SimpleGame.getCanvas().getContext(\"2d\");\r\n    let height = getTextSize(text, options.font_size, options.font_name).height;\r\n    context.save();\r\n    checkUnsetOptions(options, DEFAULT_DRAW_TEXT_OPTIONS); \r\n    context.font = options.font_size + \"px \" +  options.font_name;\r\n    if (options.center) {\r\n        context.textAlign = \"center\";\r\n        context.textBaseline = \"middle\";\r\n    }\r\n    else {\r\n        context.textAlign = \"left\";\r\n        context.textBaseline = \"bottom\";\r\n    }\r\n    if (options.fill) {\r\n        context.fillStyle = options.fill_color;\r\n        context.fillText(text, x, y);\r\n    }\r\n    if (options.stroke) {\r\n        context.lineWidth = options.line_width;\r\n        context.strokeStyle = options.stroke_color;\r\n        context.strokeText(text, x, y);\r\n    }\r\n    if (options.blur.size) {\r\n        context.shadowBlur = options.blur.size;\r\n        context.shadowColor = options.blur.color;\r\n        context.shadowOffsetX = options.blur.x;\r\n        context.shadowOffsetY = options.blur.y;\r\n    }\r\n    context.restore();\r\n}\r\n\r\nexport function getTextSize(text: string, font_size: number = DEFAULT_FONT_SIZE, font_name: string = DEFAULT_FONT): { width: number, height: number } {\r\n    let context = SimpleGame.getCanvas().getContext(\"2d\");\r\n    let font = font_size + \"px \" +  font_name;\r\n    context.save();\r\n    context.font = font;\r\n    let width = context.measureText(text).width;\r\n    context.restore();\r\n    return {\r\n        width: width,\r\n        height: font_size\r\n    };\r\n}","export enum KEYCODE {\r\n    BACKSPACE = 8,\r\n    TAB = 9,\r\n    ENTER = 13,\r\n    SHIFT = 16,\r\n    CTRL = 17,\r\n    ALT = 18,\r\n    PAUSE = 19,\r\n    CAPS_LOCK = 20,\r\n    ESCAPE = 27,\r\n    SPACE = 32,\r\n    PAGE_UP = 33,\r\n    PAGE_DOWN = 34,\r\n    END = 35,\r\n    HOME = 36,\r\n    LEFT_ARROW = 37,\r\n    UP_ARROW = 38,\r\n    RIGHT_ARROW = 39,\r\n    DOWN_ARROW = 40,\r\n    INSERT = 45,\r\n    DELETE = 46,\r\n    KEY_0 = 48,\r\n    KEY_1 = 49,\r\n    KEY_2 = 50,\r\n    KEY_3 = 51,\r\n    KEY_4 = 52,\r\n    KEY_5 = 53,\r\n    KEY_6 = 54,\r\n    KEY_7 = 55,\r\n    KEY_8 = 56,\r\n    KEY_9 = 57,\r\n    KEY_A = 65,\r\n    KEY_B = 66,\r\n    KEY_C = 67,\r\n    KEY_D = 68,\r\n    KEY_E = 69,\r\n    KEY_F = 70,\r\n    KEY_G = 71,\r\n    KEY_H = 72,\r\n    KEY_I = 73,\r\n    KEY_J = 74,\r\n    KEY_K = 75,\r\n    KEY_L = 76,\r\n    KEY_M = 77,\r\n    KEY_N = 78,\r\n    KEY_O = 79,\r\n    KEY_P = 80,\r\n    KEY_Q = 81,\r\n    KEY_R = 82,\r\n    KEY_S = 83,\r\n    KEY_T = 84,\r\n    KEY_U = 85,\r\n    KEY_V = 86,\r\n    KEY_W = 87,\r\n    KEY_X = 88,\r\n    KEY_Y = 89,\r\n    KEY_Z = 90,\r\n    LEFT_META = 91,\r\n    RIGHT_META = 92,\r\n    SELECT = 93,\r\n    NUMPAD_0 = 96,\r\n    NUMPAD_1 = 97,\r\n    NUMPAD_2 = 98,\r\n    NUMPAD_3 = 99,\r\n    NUMPAD_4 = 100,\r\n    NUMPAD_5 = 101,\r\n    NUMPAD_6 = 102,\r\n    NUMPAD_7 = 103,\r\n    NUMPAD_8 = 104,\r\n    NUMPAD_9 = 105,\r\n    MULTIPLY = 106,\r\n    ADD = 107,\r\n    SUBTRACT = 109,\r\n    DECIMAL = 110,\r\n    DIVIDE = 111,\r\n    F1 = 112,\r\n    F2 = 113,\r\n    F3 = 114,\r\n    F4 = 115,\r\n    F5 = 116,\r\n    F6 = 117,\r\n    F7 = 118,\r\n    F8 = 119,\r\n    F9 = 120,\r\n    F10 = 121,\r\n    F11 = 122,\r\n    F12 = 123,\r\n    NUM_LOCK = 144,\r\n    SCROLL_LOCK = 145,\r\n    SEMICOLON = 186,\r\n    EQUALS = 187,\r\n    COMMA = 188,\r\n    DASH = 189,\r\n    PERIOD = 190,\r\n    FORWARD_SLASH = 191,\r\n    GRAVE_ACCENT = 192,\r\n    OPEN_BRACKET = 219,\r\n    BACK_SLASH = 220,\r\n    CLOSE_BRACKET = 221,\r\n    SINGLE_QUOTE = 222\r\n}","import { DrawingOptions, DrawingCircleOptions, DrawingTextOptions } from './Drawings';\r\n\r\nexport const VERSION: string = \"0.0.2\";\r\n\r\nexport const SECOND: number = 1000;\r\n\r\nexport enum INPUT_TYPE {\r\n    KEYDOWN,\r\n    KEYUP,\r\n    MOUSE_MOVE,\r\n    MOUSE_DOWN,\r\n    MOUSE_UP\r\n}\r\n\r\nexport enum MOUSE_BUTTON {\r\n    LEFT,\r\n    MIDDLE,\r\n    RIGHT\r\n}\r\n\r\nexport const DEFAULT_FONT: string = \"impact\";\r\nexport const DEFAULT_FONT_SIZE: number = 16;\r\n\r\nexport const THEME_BACKGROUND: string = \"black\";\r\nexport const THEME_FORECOLOR: string = \"white\";\r\n\r\nexport const DEFAULT_DRAW_OPTIONS: DrawingOptions = {\r\n    line_width: 1,\r\n    stroke: true,\r\n    stroke_color: THEME_FORECOLOR,\r\n    fill: false,\r\n    fill_color: THEME_BACKGROUND\r\n}\r\n\r\nexport const DEFAULT_DRAW_CIRCLE_OPTIONS: DrawingCircleOptions = {\r\n    line_width: DEFAULT_DRAW_OPTIONS.line_width,\r\n    stroke: DEFAULT_DRAW_OPTIONS.stroke,\r\n    stroke_color: DEFAULT_DRAW_OPTIONS.stroke_color,\r\n    fill: DEFAULT_DRAW_OPTIONS.fill,\r\n    fill_color: DEFAULT_DRAW_OPTIONS.fill_color,\r\n    radius: 0,\r\n    angle: {\r\n        start: 0,\r\n        end: 2 * Math.PI\r\n    },\r\n    clockwise: false\r\n}\r\n\r\nexport const DEFAULT_DRAW_TEXT_OPTIONS: DrawingTextOptions = {\r\n    line_width: DEFAULT_DRAW_OPTIONS.line_width,\r\n    stroke: false,\r\n    stroke_color: DEFAULT_DRAW_OPTIONS.stroke_color,\r\n    fill: true,\r\n    fill_color: DEFAULT_DRAW_OPTIONS.fill_color,\r\n    font_size: DEFAULT_FONT_SIZE,\r\n    font_name: DEFAULT_FONT,\r\n    center: true,\r\n    blur: {\r\n        x: 0,\r\n        y: 0,\r\n        size: 0,\r\n        color: THEME_BACKGROUND,\r\n    }\r\n}","import { SimpleSceneManager } from '../framework/SceneManager';\r\nimport { Scene } from '../framework/Scene';\r\nimport { SimpleGame } from '../framework/Game';\r\nimport { drawRect, drawText } from '../framework/Tools/Drawings';\r\nimport { SECOND } from '../framework/Tools/constants';\r\nimport { KEYCODE } from '../framework/Tools/KeyCode';\r\n\r\nconst BACKGROUND  = \"#000000\";\r\nconst SNAKE_COLOR = \"#005599\";\r\nconst FRUIT_COLOR = \"#770000\";\r\nconst SCORE_COLOR = \"rgba(255,255,255,0.75)\";\r\nconst TEXT_SIZE   = 12;\r\nconst TEXT_FONT   = \"impact\";\r\nconst CELL_SIZE   = 20;\r\n\r\nconst INITIAL_SPEED = 4;\r\n\r\nenum DIRECTION {\r\n    LEFT,\r\n    UP,\r\n    RIGHT,\r\n    DOWN\r\n}\r\n\r\ninterface Point {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nfunction getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport class GameScene extends Scene {\r\n    public constructor() {\r\n        super(\"GameScene\");\r\n        this.width = SimpleGame.getCanvas().width;\r\n        this.height = SimpleGame.getCanvas().height;\r\n        this.cols = Math.floor(this.width / CELL_SIZE);\r\n        this.rows = Math.floor(this.height / CELL_SIZE);\r\n        this.reset();        \r\n    }\r\n\r\n    public update(elapse_time: number): void {\r\n        this.time += elapse_time;\r\n        if (this.time >= SECOND / this.speed && !this.pause && !this.game_over) {\r\n            if (!this.grow) {\r\n                this.snake.shift();\r\n            }\r\n            this.grow = false;\r\n            let x = 0;\r\n            let y = 0;\r\n            let head = this.snake[this.snake.length - 1];            \r\n            switch (this.direction) {\r\n                case DIRECTION.LEFT:\r\n                    if (head.x == 0) {\r\n                        x = this.cols * CELL_SIZE;\r\n                    }\r\n                    else {\r\n                        x -= CELL_SIZE;\r\n                    }\r\n                    break;\r\n                case DIRECTION.UP:\r\n                    if (head.y == 0) {\r\n                        y = this.rows * CELL_SIZE;\r\n                    }\r\n                    else {\r\n                        y -= CELL_SIZE;\r\n                    }\r\n                    break;\r\n                case DIRECTION.RIGHT:\r\n                    if (head.x == this.cols * CELL_SIZE - CELL_SIZE) {\r\n                        x -= this.cols * CELL_SIZE;\r\n                    }\r\n                    else {\r\n                        x = CELL_SIZE;\r\n                    }\r\n                    break;\r\n                case DIRECTION.DOWN:\r\n                    if (head.y == this.rows * CELL_SIZE - CELL_SIZE) {\r\n                        y -= this.rows * CELL_SIZE;\r\n                    }\r\n                    else {\r\n                        y = CELL_SIZE;\r\n                    }\r\n                    break;\r\n            }\r\n            let new_x = head.x + x;\r\n            let new_y = head.y + y;\r\n            if (this.isPointInSnake({x: new_x, y: new_y})) {\r\n                this.game_over = true;\r\n            }\r\n            else {\r\n                this.snake.push({x: new_x, y: new_y});\r\n                head = this.snake[this.snake.length - 1];\r\n                if (head.x == this.fruit.x && head.y == this.fruit.y) {\r\n                    this.grow = true;\r\n                    this.setFruit();\r\n                }\r\n            }\r\n            this.time = 0;\r\n        }\r\n        else if (this.game_over && this.time >= SECOND * 3) {\r\n            SimpleSceneManager.popScene();\r\n        }\r\n    }\r\n\r\n    public render(elapse_time: number): void {\r\n        drawRect(0, 0, this.width, this.height, { stroke: false, fill: true, fill_color: \"black\" });\r\n        \r\n        for (let body of this.snake) {\r\n            drawRect(body.x, body.y, CELL_SIZE, CELL_SIZE, { stroke: false, fill: true, fill_color: SNAKE_COLOR });\r\n        }\r\n\r\n        drawRect(this.fruit.x, this.fruit.y, CELL_SIZE, CELL_SIZE, { stroke: false, fill: true, fill_color: FRUIT_COLOR });\r\n\r\n        if (this.pause) {\r\n            drawText(this.width / 2, this.height / 2, \"PAUSE\", { font_size: 30, fill_color: \"teal\" });             \r\n        }\r\n        if (this.game_over) {\r\n            drawText(this.width / 2, this.height / 2, \"GAME OVER\", { font_size: 30, fill_color: \"teal\" });             \r\n        }\r\n    }\r\n\r\n    public onKeyDown(key: KEYCODE): void {\r\n        super.onKeyDown(key); //it does nothing but just in case :)\r\n        switch (key) {\r\n            case KEYCODE.LEFT_ARROW:\r\n                if (this.direction != DIRECTION.RIGHT) {\r\n                    this.direction = DIRECTION.LEFT;\r\n                }\r\n                break;\r\n            case KEYCODE.UP_ARROW:\r\n                if (this.direction != DIRECTION.DOWN) {\r\n                    this.direction = DIRECTION.UP;\r\n                }\r\n                break;\r\n            case KEYCODE.RIGHT_ARROW:\r\n                if (this.direction != DIRECTION.LEFT) {\r\n                    this.direction = DIRECTION.RIGHT;\r\n                }\r\n                break;\r\n            case KEYCODE.DOWN_ARROW:\r\n                if (this.direction != DIRECTION.UP) {\r\n                    this.direction = DIRECTION.DOWN;\r\n                }\r\n                break;\r\n            case KEYCODE.KEY_P:\r\n                this.pause = !this.pause;\r\n                break;\r\n        }\r\n    }\r\n\r\n    private width: number;\r\n    private height: number;\r\n    private cols: number;\r\n    private rows: number;\r\n    private snake: Point[];\r\n    private fruit: Point;\r\n    private grow: boolean;\r\n    private direction: DIRECTION;\r\n    private time: number;\r\n    private pause: boolean;\r\n    private game_over: boolean;\r\n    private speed: number;\r\n\r\n    private isPointInSnake(point: Point): boolean {\r\n        let looping = true;\r\n        let answer = false;\r\n        let index = 0;\r\n        while (looping) {\r\n            if (index < this.snake.length) {\r\n                let body = this.snake[index];\r\n                if (body.x == point.x && body.y == point.y) {\r\n                    looping = false;\r\n                    answer = true;\r\n                }\r\n                index++;\r\n            }\r\n            else {\r\n                looping = false;\r\n            }\r\n        }\r\n        return answer;\r\n    }\r\n\r\n    private reset(): void {\r\n        this.snake = [];\r\n        for (let i = 0; i < 4; ++i) {\r\n            this.snake.push({x: i*CELL_SIZE, y: 0});\r\n        }\r\n        this.setFruit();\r\n        this.grow = false;\r\n        this.direction = DIRECTION.RIGHT;\r\n        this.time = 0;\r\n        this.pause = false;\r\n        this.game_over = false;\r\n        this.speed = INITIAL_SPEED;\r\n    }\r\n\r\n    private setFruit(): void {\r\n        let point = {\r\n            x: CELL_SIZE * getRandomIntInclusive(0, this.cols - 1),\r\n            y: CELL_SIZE * getRandomIntInclusive(0, this.rows - 1)\r\n        };\r\n        while (this.isPointInSnake(point)) {\r\n            point = {\r\n                x: CELL_SIZE * getRandomIntInclusive(0, this.cols),\r\n                y: CELL_SIZE * getRandomIntInclusive(0, this.rows)\r\n            };\r\n        }\r\n        this.fruit = point;\r\n    }\r\n}","import { SimpleGame } from '../framework/Game';\r\nimport { Scene } from '../framework/Scene';\r\nimport { drawRect, drawText } from '../framework/Tools/Drawings';\r\nimport { SECOND } from '../framework/Tools/constants';\r\nimport { SimpleSceneManager } from '../framework/SceneManager';\r\nimport { GameScene } from './GameScene';\r\n\r\nconst DELAY: number = 3 * SECOND;\r\n\r\nexport class IntroScene extends Scene {\r\n    public constructor() {\r\n        super(\"Intro\");\r\n    }\r\n\r\n    public onEnter(): boolean {\r\n        this.time = 0;\r\n        return true;        \r\n    }\r\n\r\n    public update(elapse_time: number): void {\r\n        this.time += elapse_time;\r\n        if (this.time >= DELAY) {\r\n            SimpleSceneManager.pushScene(new GameScene());\r\n        }\r\n    }\r\n\r\n    public render(elapse_time: number): void {\r\n        let width = SimpleGame.getCanvas().width;\r\n        let height = SimpleGame.getCanvas().height;\r\n        drawRect(0, 0, width, height, { stroke: false, fill: true, fill_color: \"black\" });\r\n        drawText(width / 2, height / 2, \"Simple Kreations\", { font_size: 30, fill_color: \"teal\" }); \r\n    }\r\n\r\n    private time: number;    \r\n}","import { SimpleGame } from './framework/Game';\r\nimport { IntroScene } from \"./game/IntroScene\";\r\nimport { SimpleSceneManager } from './framework/SceneManager';\r\n\r\nwindow.onload = function () {\r\n    SimpleGame.create({ title: \"Snake\"});\r\n    SimpleSceneManager.pushScene(new IntroScene());\r\n    SimpleGame.init();\r\n};"]}